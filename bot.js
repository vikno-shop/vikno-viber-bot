require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
const { Bot, Events, Message } = require('viber-bot');

if (!process.env.VIBER_AUTH_TOKEN || !process.env.GMAIL_APP_PASSWORD || !process.env.RENDER_EXTERNAL_HOSTNAME) {
    console.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.");
    process.exit(1);
}

const app = express();
app.use(bodyParser.json());

const awaitingPhone = {};
const bot = new Bot({
    authToken: process.env.VIBER_AUTH_TOKEN,
    name: "–í–Ü–ö–ù–û‚Ñ¢",
    avatar: "https://vikno.shop/images/vikno-logo-viber.png"
});

app.use("/webhook", bot.middleware());
app.get("/", (req, res) => res.send("‚úÖ VIKNO Viber Bot –∞–∫—Ç–∏–≤–Ω–∏–π"));

bot.onSubscribe(response => {
    showMainMenu(response);
});

function showMainMenu(response) {
    response.send(new Message.Text("–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å, —â–æ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:", {
        buttons: [
            { ActionType: "reply", ActionBody: "–í–Ü–ö–ù–ê", Text: "ü™ü –í–Ü–ö–ù–ê" },
            { ActionType: "reply", ActionBody: "–î–í–ï–†–Ü", Text: "üö™ –î–í–ï–†–Ü" },
            { ActionType: "reply", ActionBody: "–ë–ê–õ–ö–û–ù–ò", Text: "üèô –ë–ê–õ–ö–û–ù–ò" },
            { ActionType: "reply", ActionBody: "–†–û–ó–°–£–í–ù–Ü –°–ò–°–¢–ï–ú–ò", Text: "üß© –†–û–ó–°–£–í–ù–Ü –°–ò–°–¢–ï–ú–ò" }
        ],
        InputFieldState: "hidden"
    }));
}

function showSectionMenu(text, response) {
    response.send(new Message.Text(`–í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —Ä–æ–∑–¥—ñ–ª "${text}". –©–æ —Ä–æ–±–∏–º–æ –¥–∞–ª—ñ?`, {
        buttons: [
            { ActionType: "reply", ActionBody: "–ó–ê–ü–ò–°–ê–¢–ò–°–¨", Text: "üìû –ó'—î–¥–Ω–∞—Ç–∏ –∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º" },
            { ActionType: "reply", ActionBody: "–ó–ê–õ–ò–®–ò–¢–ò –ö–û–ù–¢–ê–ö–¢", Text: "üìã –ó–∞–ª–∏—à–∏—Ç–∏ –Ω–æ–º–µ—Ä" },
            { ActionType: "reply", ActionBody: "–ú–ï–ù–Æ", Text: "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é" }
        ],
        InputFieldState: "hidden"
    }));
}

async function handlePhoneSubmission(phone, userId, response) {
    try {
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: 'viknoshopping@gmail.com',
                pass: process.env.GMAIL_APP_PASSWORD
            }
        });

        await transporter.sendMail({
            from: 'viknoshopping@gmail.com',
            to: 'viknoshopping@gmail.com',
            subject: '–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –∑ Viber –±–æ—Ç–∞',
            text: `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–æ–º–µ—Ä: ${phone}`
        });

        delete awaitingPhone[userId];
        await response.send(new Message.Text("‚úÖ –î—è–∫—É—î–º–æ! –ù–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏."));

    } catch (err) {
        console.error("‚ùå Email –ø–æ–º–∏–ª–∫–∞:", err);
        await response.send(new Message.Text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."));
    }
}

bot.on(Events.MESSAGE_RECEIVED, async (message, response) => {
    try {
        const text = message.text.trim();
        const userId = response.userProfile.id;

        if (awaitingPhone[userId]) {
            if (/^\+?\d{9,15}$/.test(text)) {
                await handlePhoneSubmission(text, userId, response);
            } else {
                await response.send(new Message.Text("‚ùóÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX."));
            }
            return;
        }

        switch (text) {
            case "–í–Ü–ö–ù–ê":
            case "–î–í–ï–†–Ü":
            case "–ë–ê–õ–ö–û–ù–ò":
            case "–†–û–ó–°–£–í–ù–Ü –°–ò–°–¢–ï–ú–ò":
                return showSectionMenu(text, response);
            case "–ú–ï–ù–Æ":
                return showMainMenu(response);
            case "–ó–ê–ü–ò–°–ê–¢–ò–°–¨":
                return response.send(new Message.Text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —á–∞—Ç—É –∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º: viber://chat?number=+380678388420"));
            case "–ó–ê–õ–ò–®–ò–¢–ò –ö–û–ù–¢–ê–ö–¢":
                awaitingPhone[userId] = true;
                return response.send(new Message.Text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX."));
            default:
                return showMainMenu(response);
        }

    } catch (err) {
        console.error("‚ùå Unhandled –±–æ—Ç –ø–æ–º–∏–ª–∫–∞:", err);
        await response.send(new Message.Text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."));
    }
});

const port = process.env.PORT || 10000;
app.listen(port, () => {
    console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);

    const webhookUrl = `https://${process.env.RENDER_EXTERNAL_HOSTNAME}/webhook`;
    bot.setWebhook(webhookUrl)
        .then(() => console.log(`‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${webhookUrl}`))
        .catch(err => console.error("‚ùå Webhook –ø–æ–º–∏–ª–∫–∞:", err));
});
