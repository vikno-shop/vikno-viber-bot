require('dotenv').config();
const ViberBot = require('viber-bot').Bot;
const BotEvents = require('viber-bot').Events;
const TextMessage = require('viber-bot').Message.Text;
const express = require('express');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if (!process.env.VIBER_AUTH_TOKEN || !process.env.GMAIL_APP_PASSWORD || !process.env.RENDER_EXTERNAL_HOSTNAME) {
    console.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (VIBER_AUTH_TOKEN, GMAIL_APP_PASSWORD, RENDER_EXTERNAL_HOSTNAME)");
    process.exit(1);
}

const app = express();
app.use(bodyParser.json());

const awaitingPhone = {};

const bot = new ViberBot({
    authToken: process.env.VIBER_AUTH_TOKEN,
    name: "–í–Ü–ö–ù–û‚Ñ¢",
    avatar: "https://vikno.shop/images/vikno-logo-viber.png"
});

// –ú–∞—Ä—à—Ä—É—Ç–∏
app.use("/webhook", bot.middleware());
app.get("/", (req, res) => res.send("‚úÖ VIKNO Viber Bot Active"));

bot.onSubscribe(response => {
    showMainMenu(response);
});

// –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é
function showMainMenu(response) {
    response.send(new TextMessage("–í—ñ—Ç–∞—î–º–æ, –æ–±–µ—Ä—ñ—Ç—å, —â–æ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:", {
        buttons: [
            { ActionType: "reply", ActionBody: "–í–Ü–ö–ù–ê", Text: "ü™ü –í–Ü–ö–ù–ê" },
            { ActionType: "reply", ActionBody: "–î–í–ï–†–Ü", Text: "üö™ –î–í–ï–†–Ü" },
            { ActionType: "reply", ActionBody: "–ë–ê–õ–ö–û–ù–ò", Text: "üèô –ë–ê–õ–ö–û–ù–ò" },
            { ActionType: "reply", ActionBody: "–†–û–ó–°–£–í–ù–Ü –°–ò–°–¢–ï–ú–ò", Text: "üß© –†–û–ó–°–£–í–ù–Ü –°–ò–°–¢–ï–ú–ò" }
        ],
        InputFieldState: "hidden"
    }));
}

// –ú–µ–Ω—é —Ä–æ–∑–¥—ñ–ª—É
function showSectionMenu(text, response) {
    response.send(new TextMessage(`–í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —Ä–æ–∑–¥—ñ–ª "${text}". –©–æ —Ä–æ–±–∏–º–æ –¥–∞–ª—ñ?`, {
        buttons: [
            { ActionType: "reply", ActionBody: "–ó–ê–ü–ò–°–ê–¢–ò–°–¨", Text: "üìû –ó'—î–¥–Ω–∞—Ç–∏ –∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º" },
            { ActionType: "reply", ActionBody: "–ó–ê–õ–ò–®–ò–¢–ò –ö–û–ù–¢–ê–ö–¢", Text: "üìã –ó–∞–ª–∏—à–∏—Ç–∏ –Ω–æ–º–µ—Ä" },
            { ActionType: "reply", ActionBody: "–ú–ï–ù–Æ", Text: "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é" }
        ],
        InputFieldState: "hidden"
    }));
}

// –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è email
async function handlePhoneSubmission(phone, userId, response) {
    try {
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: 'viknoshopping@gmail.com',
                pass: process.env.GMAIL_APP_PASSWORD
            }
        });

        await transporter.sendMail({
            from: 'viknoshopping@gmail.com',
            to: 'viknoshopping@gmail.com',
            subject: '–ó–∞–ø–∏—Ç –∑ Viber –±–æ—Ç–∞',
            text: `–ù–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó: ${phone}`
        });

        response.send(new TextMessage("‚úÖ –î—è–∫—É—î–º–æ! –ù–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."));
        delete awaitingPhone[userId];
    } catch (err) {
        console.error("‚ùå Email send error:", err);
        response.send(new TextMessage("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."));
    }
}

// –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
bot.on(BotEvents.MESSAGE_RECEIVED, async (message, response) => {
    const text = message.text.trim();
    const userId = response.userProfile.id;

    if (awaitingPhone[userId]) {
        if (/^\+?\d{9,15}$/.test(text)) {
            await handlePhoneSubmission(text, userId, response);
        } else {
            response.send(new TextMessage("‚ùó –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX"));
        }
        return;
    }

    switch (text) {
        case "–í–Ü–ö–ù–ê":
        case "–î–í–ï–†–Ü":
        case "–ë–ê–õ–ö–û–ù–ò":
        case "–†–û–ó–°–£–í–ù–Ü –°–ò–°–¢–ï–ú–ò":
            showSectionMenu(text, response);
            break;
        case "–ú–ï–ù–Æ":
            showMainMenu(response);
            break;
        case "–ó–ê–ü–ò–°–ê–¢–ò–°–¨":
            response.send(new TextMessage("üì≤ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —á–∞—Ç—É: viber://chat?number=+380678388420"));
            break;
        case "–ó–ê–õ–ò–®–ò–¢–ò –ö–û–ù–¢–ê–ö–¢":
            awaitingPhone[userId] = true;
            response.send(new TextMessage("üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:"));
            break;
        default:
            showMainMenu(response);
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const port = process.env.PORT || 10000;
app.listen(port, () => {
    console.log(`‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    const webhookUrl = `https://${process.env.RENDER_EXTERNAL_HOSTNAME}/webhook`;
    bot.setWebhook(webhookUrl)
        .then(() => console.log(`‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${webhookUrl}`))
        .catch(err => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook:", err));
});
